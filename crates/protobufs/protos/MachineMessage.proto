syntax = "proto3";
package printspool_protobufs;

// Machines send MachineMessages
message MachineMessage {
  // 1-8: Payloads
  oneof payload {
    Init init = 1;
    Feedback feedback = 2;
  }

  message Init {
    int64 process_started_at_nanos = 1;
  }

  // Note: Feedback is a seperate message from MachineMessage so it's indexing is namespaced and
  // do not need to avoid collisions with payload indexes.
  message Feedback {
    // 1-5: Frequently set scalars
    Status status = 1;
    uint64 machine_flags = 2; // variable length bitfield. Lower bits use less space.

    // 6-15: Frequently set sub-messages
    // Events may be duplicated and sent more then once.
    repeated TaskProgress task_progress = 6;
    repeated Axis axes = 7;
    repeated Heater heaters = 8;
    repeated SpeedController speed_controllers = 9;

    // Raw response strings from the device. No guarentee is made that all
    // responses received will be relayed to the combinator. A best effort
    // attempt will be made to relay responses within a performance constraint.
    //
    // History entries will not be duplicated and will be sent at most once to each
    // client.
    repeated GCodeHistoryEntry gcode_history = 10;

    // 16-99:  [Reserved for Future Use]

    // Note: field numbers 16 through 2047 take 2 bytes
    // 100-999 Less frequently set sub-messages
    Error error = 100;

    // 1000-1999: Less frequently set scalars
    // [Reserved for Future Use]

    // 2000-2047:  [Reserved for Future Use]
  }

  enum Status {
    ERRORED = 0;
    ESTOPPED = 1;
    DISCONNECTED = 2;
    CONNECTING = 3;
    READY = 4;
  }

  enum DirectionOfMovement {
    REVERSE = 0;
    FORWARD = 1;
  }

  message Error {
    string message = 1;
    // 2: reserved for future error codes implementation
    // string code = 2;
  }

  message TaskProgress {
    string task_id = 1;
    uint32 despooled_line_number = 2;
    TaskStatus status = 3;
  }

  enum TaskStatus {
      // Before sending to the driver
      // SPOOLED;
      // After sending to the driver
      TASK_STARTED = 0;
      TASK_FINISHED = 1;
      TASK_PAUSED = 2;
      TASK_CANCELLED = 3;
      TASK_ERRORED = 4;
  }

  message Axis {
    string address = 1;

    // Positions are in mm
    float target_position = 2;
    float actual_position = 3;
    DirectionOfMovement direction = 4;
    bool homed = 8;
  }

  message Heater {
    string address = 1;

    // Temperatures are in celsius
    float target_temperature = 2;
    float actual_temperature = 3;

    bool enabled = 4;
    bool blocking = 5;
  }

  message SpeedController {
    string address = 1;

    // Speeds are in the range 0% to 100% where 100% is full speed.
    //
    // Note: in future this may be ammended to go from -100% to 100% in which case:
    // > 0: clockwise,
    // < 0: counterclockwise.
    float target_speed = 2;
    float actual_speed = 3;

    bool enabled = 4;
  }

  enum GCodeHistoryDirection {
    RX = 0;
    TX = 1;
  }

  // Raw response strings from the device correlated to the task + line number
  // that preceeded them.
  message GCodeHistoryEntry {
    GCodeHistoryDirection direction = 3;
    string content = 4;
  }
}
