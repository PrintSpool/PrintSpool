#!/bin/bash
set -eE -o functrace
cd "$( dirname "${BASH_SOURCE[0]}" )"

failure() {
  local lineno=$1
  local msg=$2
  echo "Failed at $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

ARCH=$(uname -m)
FRESH_INSTALL=0
if [ -d "/usr/local/etc/teg/" ]; then
    echo "Updating previous Teg for $ARCH install..."
else
    echo "Installing Teg for $ARCH..."
    FRESH_INSTALL=1
fi

# Install dependencies
sudo apt update
sudo apt install \
  libgtk-3-0 \
  libasound2 \
  libbsd-dev \
  postgresql \
  postgresql-contrib \
  rsync \
  apg \
  unzip \
  `# Belt Engine & Cura Engine Dependencies` \
  python3-pip \
  libgeos-dev \
  libblas-dev \
  liblapack-dev \
  gfortran \
  libxslt1-dev \
  libxml2-dev \
  libjpeg-dev \
  zlib1g-dev \

# TEG_USER="teg"
# sudo useradd $TEG_USER || true
# sudo usermod -a -G dialout $TEG_USER || true

TEG_USER="root"
TEG_USER_HOME=$( getent passwd "$TEG_USER" | cut -d: -f6 )

# Configure postgres
if [ $FRESH_INSTALL = "1" ]; then
  DB_USER="teg"
  DB=$DB_USER
  DB_PASSWORD=`apg -n 1 -m 64 -M NCL -E \:\'\"\\`

  sudo -u postgres createuser -d $DB_USER || true
  sudo -u postgres createdb -O $DB_USER $DB || true
  sudo -u postgres psql -c "ALTER USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"

  sudo -u $TEG_USER touch $TEG_USER_HOME/.pgpass
  sudo -u $TEG_USER chmod 0600 $TEG_USER_HOME/.pgpass

  # Remove old pgpass entries
  sudo -u $TEG_USER sed -i "/localhost\:\*\:$DB\:$DB_USER/d" $TEG_USER_HOME/.pgpass

  # Add new pgpass entry
  PG_PASS_LINE="localhost:*:$DB:$DB_USER:$DB_PASSWORD"
  sudo -u $TEG_USER sh -c "echo \"$PG_PASS_LINE\" >> $TEG_USER_HOME/.pgpass"

  if [ "${TEG_DEV}" == "1" ]; then
    touch ~/.pgpass
    chmod 0600 ~/.pgpass
    sed -i "/localhost\:\*\:$DB\:$DB_USER/d" ~/.pgpass
    echo "$PG_PASS_LINE" >> ~/.pgpass
  fi
fi

# create directories
sudo mkdir -p /usr/local/etc/teg/
sudo mkdir -p /var/local/teg/
sudo mkdir -p /var/local/teg-common/

sudo chmod 700 /usr/local/etc/teg/
sudo chmod 700 /var/local/teg/
sudo chmod 700 /var/local/teg-common/

if [ "${TEG_DEV}" == "1" ]; then
  sudo chown -R `whoami`:`whoami` /usr/local/etc/teg/
  sudo chown -R `whoami`:`whoami` /var/local/teg/
  sudo chown -R `whoami`:`whoami` /var/local/teg-common/
else
  sudo chown -R ${TEG_USER}:${TEG_USER} /usr/local/etc/teg/
  sudo chown -R ${TEG_USER}:${TEG_USER} /var/local/teg/
  sudo chown -R ${TEG_USER}:${TEG_USER} /var/local/teg-common/
fi


# create a tmp dir
SCRIPT_DIR=$(pwd)
WORK_DIR=$(mktemp -d)

# check if tmp dir was created
if [[ ! "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
  echo "Could not create temp dir"
  exit 1
fi

# deletes the temp directory
function cleanup {
  rm -rf "$WORK_DIR"
  echo "Deleted temp working directory $WORK_DIR"
}

# register the cleanup function to be called on the EXIT signal
trap cleanup EXIT

# Change to the tmp dir
cd $WORK_DIR

if [ "${LOCAL_ARTIFACT}" == "1" ]; then
  echo ""
  echo "Installing local development version of Teg"
  echo ""

  TEG_ARCH=$ARCH $SCRIPT_DIR/ci/create-artifact
  cp -r $SCRIPT_DIR/../artifact-working-dir/* ./
else
  # Download the latest release

  # Use the provided github repo or default to "PrintSpool/PrintSpool"
  PRINTSPOOL_GITHUB="${PRINTSPOOL_GITHUB:-PrintSpool/PrintSpool}"

  ARTIFACT_NAME="teg-$ARCH.zip"

  LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/$PRINTSPOOL_GITHUB/releases/latest)

  # The releases are returned in the format {"id":3622206,"tag_name":"hello-1.0.0.11",...},
  # we have to extract the tag_name.
  LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')

  ARTIFACT_URL="https://github.com/$PRINTSPOOL_GITHUB/releases/download/$LATEST_VERSION/$ARTIFACT_NAME"

  wget $ARTIFACT_URL
  unzip $ARTIFACT_NAME
  rm $ARTIFACT_NAME
fi

# Download and install belt-engine
if [ $EXPERIMENTAL_BELT_ENGINE = "1" ]; then
  wget https://github.com/Autodrop3d/BeltEngine/raw/main/dist/belt-engine-0.1.3.tar.gz
  sudo pip3 install ./belt-engine-0.1.3.tar.gz

  pushd .
  cd ./etc
  wget https://raw.githubusercontent.com/Autodrop3d/BeltEngine/main/belt_engine/settings/CR30.cfg.ini
  popd
fi

# Download and install cura-engine
wget https://github.com/Autodrop3d/autodrop3dClient/raw/master/CuraEngine
chmod 777 CuraEngine
mv CuraEngine /usr/local/bin/CuraEngine

# Download the latest webrtc-streamer release
GITHUB_REPO="mpromonet/webrtc-streamer"
LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/$GITHUB_REPO/releases/latest)

# The releases are returned in the format {"id":3622206,"tag_name":"hello-1.0.0.11",...},
# we have to extract the tag_name.
LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')

ARTIFACT_DIR="webrtc-streamer-$LATEST_VERSION-Linux-$ARCH-Release"
ARTIFACT_NAME="$ARTIFACT_DIR.tar.gz"

ARTIFACT_URL="https://github.com/$GITHUB_REPO/releases/download/$LATEST_VERSION/$ARTIFACT_NAME"

wget $ARTIFACT_URL
tar -xf $ARTIFACT_NAME
rm $ARTIFACT_NAME
mv $ARTIFACT_DIR ./etc/webrtc-streamer

# Install etc (migrations, binaries, configs and webrtc-streamer)
sudo rsync --chown=$TEG_USER:$TEG_USER -a --delete ./etc/ /usr/local/etc/teg

# Install binaries on path
sudo ln -vsf "/usr/local/etc/teg/teg-invite" /usr/local/bin

# Install System D service files
sudo chmod 644 ./services/*
sudo mv ./services/* /lib/systemd/system/

sudo systemctl daemon-reload
sudo systemctl restart teg-server teg-health-monitor teg-webrtc-streamer
sudo systemctl enable teg-server teg-health-monitor teg-webrtc-streamer

# TODO: Instead of waiting for 1 second this should wait for the database to be migrated
echo ""
echo "Migrating database..."
sleep 1s

echo "Teg Installation Complete"

# Generate an invite key for the user
if [ $FRESH_INSTALL = "1" ]; then
  sudo teg-invite
fi
