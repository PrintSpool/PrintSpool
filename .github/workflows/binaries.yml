on: [push]

name: Build Binaries

jobs:
  x64_build:
    name: Build x64 Rust Binaries
    runs-on: ubuntu-18.04
    if: startsWith(github.ref, 'refs/tags/')
    env:
      # SQLX_OFFLINE: "true"
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      DATABASE_URL: "postgres://postgres:postgres@localhost/postgres"
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - name: Install Dependencies
        run: >
          sudo apt-get install
          lld
          libbsd-dev
          protobuf-compiler
          zip
          unzip
      - name: Database Setup
        run: |
          cargo install sqlx-cli --version 0.5.9 --no-default-features --features postgres
          cd ./crates/server && sqlx database setup
      - name: Build X64 Release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      # X86 Debug/Release folder structure
      - name: Create artifact folder structure
        run: PRINTSPOOL_ARCH=x86_64 ./scripts/ci/create-artifact
      - name: Upload the Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: printspool-x86_64
          path: ./artifact-working-dir
      # Upload the Release Artifact
      - name: Zip Release Binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd ./artifact-working-dir
          zip -r ../printspool-x86_64.zip ./
      - name: Upload X86 Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./printspool-x86_64.zip

  arm_v7_build:
    name: Build ARMv7 Rust Binaries
    runs-on: ubuntu-18.04
    env:
      # SQLX_OFFLINE: "true"
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      DATABASE_URL: "postgres://postgres:postgres@localhost/postgres"
      PYO3_CROSS: 1
      PYO3_CROSS_LIB_DIR: "/usr/lib/python3.6/"
      PYO3_CROSS_PYTHON_VERSION: "3.6"
      # PYO3_CROSS_LIB_DIR: "/usr/lib/arm-linux-gnueabihf"
      # PYO3_CROSS_PYTHON_VERSION: "3.6"
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: armv7-unknown-linux-gnueabihf
      - uses: Swatinem/rust-cache@v1
      - name: Install multiarch support
        run: |
          sudo sed -i 's/deb http/deb [arch=i386,amd64] http/g' /etc/apt/sources.list
          echo "deb [arch=armhf] http://bg.ports.ubuntu.com/ bionic main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://bg.ports.ubuntu.com/ bionic-updates main restricted" | sudo tee -a /etc/apt/sources.list

          sudo dpkg --add-architecture armhf
          sudo apt-get update
          sudo apt --fix-broken install
          sudo apt-get install gcc-multilib g++-multilib
      - name: Install Dependencies
        run: >
          sudo apt-get install
          gcc-arm-linux-gnueabihf
          g++-arm-linux-gnueabihf
          g++-multilib-arm-linux-gnueabihf
          gcc-multilib-arm-linux-gnueabihf
          lld
          libbsd-dev
          libbsd-dev:armhf
          protobuf-compiler
          zip
          unzip
          build-essential
          cmake
          pkg-config
          libssl-dev
          clang
          libpython3.6-dbg:armhf
      # libpython3.6-dev:armhf
      # - name: Symlink Python
      #   run: |
      #     sudo cp /usr/lib/arm-linux-gnueabihf/libpython3.6m.so /usr/lib/arm-linux-gnueabihf/libpython3.6.so
      # - name: Check install
      #   run: dpkg -S arm-linux-gnueabihf-gcc
      - name: Database Setup
        run: |
          cargo install sqlx-cli --version 0.5.9 --no-default-features --features postgres
          cd ./crates/server && sqlx database setup
      # Armv7 Debug Builds
      - name: Build ARMv7 (Debug)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=armv7-unknown-linux-gnueabihf

      # Armv7 Release Builds
      - name: Build ARMv7 (Release)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=armv7-unknown-linux-gnueabihf

      # Armv7 Debug/Release folder structure
      - name: Create artifact folder structure
        run: PRINTSPOOL_ARCH=armv7l ./scripts/ci/create-artifact

      # Upload the Release Artifact
      - name: Upload the Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: printspool-armv7l
          path: ./artifact-working-dir
      - name: Zip Release Binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd ./artifact-working-dir
          zip -r ../printspool-armv7l.zip ./
      - name: Upload ARMv7 Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./printspool-armv7l.zip

      # Raspbian SD Card Image
      - name: 'Copy the artifact into Custopizer'
        run: |
          mkdir -p ./custopizer/scripts/files
          cp -R ./artifact-working-dir/ ./custopizer/scripts/files/printspool
          ls -la ./custopizer/scripts/files/printspool

      - name: "⬇ Download Raspberry Pi OS Lite"
        id: download_os
        run: |
          ./scripts/download-raspberry-pi-os
          cp ./scripts/install ./custopizer/scripts/files/
      - name: "🏗 Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@main
        with:
          workspace: "${{ github.workspace }}/custopizer/build"
          scripts:  "${{ github.workspace }}/custopizer/scripts"
          config: "${{ github.workspace }}/custopizer/config.local"

      - name: "✏ Rename image"
        run: |
          IMAGE="printspool-pi-img.img"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

          cd custopizer/build
          mv output.img $IMAGE

      - name: "📦 Package the image"
        id: package-image
        uses: OctoPrint/actions/package-rpi-image@main
        with:
          image_path: "custopizer/build/${{ env.IMAGE }}"

      # - name: "🆕 Generate rpi-imager.json snippet"
      #   uses: OctoPrint/actions/rpi-imager-snippet@main
      #   with:
      #     name: "${{ env.RELEASE_NAME }}"
      #     description: "PrintSpool 3D printer control for Raspberry Pi"
      #     icon: "https://octopi.octoprint.org/rpi-imager.png"
      #     url: "https://github.com/OctoPrint/OctoPi-UpToDate/releases/download/${{ env.RELEASE_TAG }}/${{ steps.package-image.outputs.zip_name }}"
      #     output: "build/rpi-imager.json"
      #     image_sha256: ${{ steps.package-image.outputs.image_sha256 }}
      #     image_size: ${{ steps.package-image.outputs.image_size }}
      #     zip_sha256: ${{ steps.package-image.outputs.zip_sha256 }}
      #     zip_size: ${{ steps.package-image.outputs.zip_size }}
      - name: Upload the Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package-image.outputs.zip_name }}
          path: custopizer/build/${{ steps.package-image.outputs.zip_name }}
      - name: "🔖 Create release & attach assets"
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          # name: "${{ env.RELEASE_NAME }}"
          # tag_name: "${{ env.RELEASE_TAG }}"
          # body_path: "build/release.md"
          # prerelease: ${{ contains(env.OCTOPRINT_VERSION, 'rc') }}
          # fail_on_unmatched_files: true
          files: |
            custopizer/build/${{ steps.package-image.outputs.zip_name }}
            custopizer/build/${{ steps.package-image.outputs.zip_name }}.md5
            custopizer/build/${{ steps.package-image.outputs.zip_name }}.sha256
          # custopizer/build/rpi-imager.json
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
